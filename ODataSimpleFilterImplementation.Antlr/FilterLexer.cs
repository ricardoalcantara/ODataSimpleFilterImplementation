//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Filter.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FilterLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, OR=4, AND=5, EQ=6, NE=7, GT=8, GE=9, LT=10, LE=11, 
		ENDSWITH=12, STARTSWITH=13, SUBSTRINGOF=14, STRING=15, ID=16, INT=17, 
		NEWLINE=18, WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "OR", "AND", "EQ", "NE", "GT", "GE", "LT", "LE", 
		"ENDSWITH", "STARTSWITH", "SUBSTRINGOF", "STRING", "ID", "INT", "NEWLINE", 
		"WS"
	};


	public FilterLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FilterLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'or'", "'and'", "'eq'", "'ne'", "'gt'", "'ge'", 
		"'lt'", "'le'", "'endswith'", "'startswith'", "'substringof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "OR", "AND", "EQ", "NE", "GT", "GE", "LT", "LE", 
		"ENDSWITH", "STARTSWITH", "SUBSTRINGOF", "STRING", "ID", "INT", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Filter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FilterLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', '\x86', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x6', '\x10', 'k', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 'l', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x6', '\x11', 'r', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', 's', '\x3', '\x12', '\x6', '\x12', 'w', '\n', 
		'\x12', '\r', '\x12', '\xE', '\x12', 'x', '\x3', '\x13', '\x5', '\x13', 
		'|', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x6', 
		'\x14', '\x81', '\n', '\x14', '\r', '\x14', '\xE', '\x14', '\x82', '\x3', 
		'\x14', '\x3', '\x14', '\x3', 'l', '\x2', '\x15', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', 
		'%', '\x14', '\'', '\x15', '\x3', '\x2', '\x5', '\x4', '\x2', '\x43', 
		'\\', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '\v', '\v', 
		'\"', '\"', '\x2', '\x8A', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x3', ')', '\x3', '\x2', '\x2', '\x2', '\x5', '+', '\x3', 
		'\x2', '\x2', '\x2', '\a', '-', '\x3', '\x2', '\x2', '\x2', '\t', '/', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\x36', '\x3', '\x2', '\x2', '\x2', '\xF', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '<', '\x3', '\x2', '\x2', '\x2', '\x13', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x42', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x19', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1D', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', 'h', '\x3', '\x2', '\x2', '\x2', '!', 'q', '\x3', 
		'\x2', '\x2', '\x2', '#', 'v', '\x3', '\x2', '\x2', '\x2', '%', '{', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\x80', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\a', '*', '\x2', '\x2', '*', '\x4', '\x3', '\x2', '\x2', '\x2', '+', 
		',', '\a', '.', '\x2', '\x2', ',', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\a', '+', '\x2', '\x2', '.', '\b', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\a', 'q', '\x2', '\x2', '\x30', '\x31', '\a', 't', '\x2', 
		'\x2', '\x31', '\n', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x63', '\x2', '\x2', '\x33', '\x34', '\a', 'p', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\x66', '\x2', '\x2', '\x35', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', 'g', '\x2', '\x2', '\x37', '\x38', '\a', 
		's', '\x2', '\x2', '\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 'p', '\x2', '\x2', ':', ';', '\a', 'g', '\x2', '\x2', ';', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 'i', '\x2', '\x2', 
		'=', '>', '\a', 'v', '\x2', '\x2', '>', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', 'i', '\x2', '\x2', '@', '\x41', '\a', 'g', '\x2', '\x2', 
		'\x41', '\x14', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 'n', 
		'\x2', '\x2', '\x43', '\x44', '\a', 'v', '\x2', '\x2', '\x44', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 'n', '\x2', '\x2', '\x46', 
		'G', '\a', 'g', '\x2', '\x2', 'G', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', 'g', '\x2', '\x2', 'I', 'J', '\a', 'p', '\x2', '\x2', 
		'J', 'K', '\a', '\x66', '\x2', '\x2', 'K', 'L', '\a', 'u', '\x2', '\x2', 
		'L', 'M', '\a', 'y', '\x2', '\x2', 'M', 'N', '\a', 'k', '\x2', '\x2', 
		'N', 'O', '\a', 'v', '\x2', '\x2', 'O', 'P', '\a', 'j', '\x2', '\x2', 
		'P', '\x1A', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 'u', '\x2', '\x2', 
		'R', 'S', '\a', 'v', '\x2', '\x2', 'S', 'T', '\a', '\x63', '\x2', '\x2', 
		'T', 'U', '\a', 't', '\x2', '\x2', 'U', 'V', '\a', 'v', '\x2', '\x2', 
		'V', 'W', '\a', 'u', '\x2', '\x2', 'W', 'X', '\a', 'y', '\x2', '\x2', 
		'X', 'Y', '\a', 'k', '\x2', '\x2', 'Y', 'Z', '\a', 'v', '\x2', '\x2', 
		'Z', '[', '\a', 'j', '\x2', '\x2', '[', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', 'u', '\x2', '\x2', ']', '^', '\a', 'w', '\x2', '\x2', 
		'^', '_', '\a', '\x64', '\x2', '\x2', '_', '`', '\a', 'u', '\x2', '\x2', 
		'`', '\x61', '\a', 'v', '\x2', '\x2', '\x61', '\x62', '\a', 't', '\x2', 
		'\x2', '\x62', '\x63', '\a', 'k', '\x2', '\x2', '\x63', '\x64', '\a', 
		'p', '\x2', '\x2', '\x64', '\x65', '\a', 'i', '\x2', '\x2', '\x65', '\x66', 
		'\a', 'q', '\x2', '\x2', '\x66', 'g', '\a', 'h', '\x2', '\x2', 'g', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'j', '\a', ')', '\x2', '\x2', 'i', 'k', 
		'\v', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', ')', '\x2', '\x2', 'o', ' ', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\t', '\x2', '\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\t', '\x3', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '$', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\a', '\xF', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\a', '\f', '\x2', '\x2', '~', '&', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x81', '\t', '\x4', '\x2', '\x2', '\x80', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\b', 
		'\x14', '\x2', '\x2', '\x85', '(', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 
		'l', 's', 'x', '{', '\x82', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
