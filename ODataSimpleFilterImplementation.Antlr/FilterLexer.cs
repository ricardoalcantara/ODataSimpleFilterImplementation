//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Filter.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FilterLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OR=5, AND=6, EQ=7, NE=8, GT=9, GE=10, 
		LT=11, LE=12, ENDSWITH=13, STARTSWITH=14, SUBSTRINGOF=15, STRING=16, EMPTY=17, 
		ID=18, INT=19, NEWLINE=20, WS=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "OR", "AND", "EQ", "NE", "GT", "GE", "LT", 
		"LE", "ENDSWITH", "STARTSWITH", "SUBSTRINGOF", "STRING", "EMPTY", "ID", 
		"INT", "NEWLINE", "WS"
	};


	public FilterLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FilterLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'('", "','", "')'", "'or'", "'and'", "'eq'", "'ne'", 
		"'gt'", "'ge'", "'lt'", "'le'", "'endswith'", "'startswith'", "'substringof'", 
		null, "''''"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OR", "AND", "EQ", "NE", "GT", "GE", "LT", 
		"LE", "ENDSWITH", "STARTSWITH", "SUBSTRINGOF", "STRING", "EMPTY", "ID", 
		"INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Filter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FilterLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x17', '\x92', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', 
		't', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 'u', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x6', 
		'\x13', '~', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x7F', '\x3', 
		'\x14', '\x6', '\x14', '\x83', '\n', '\x14', '\r', '\x14', '\xE', '\x14', 
		'\x84', '\x3', '\x15', '\x5', '\x15', '\x88', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x6', '\x16', '\x8D', '\n', '\x16', '\r', 
		'\x16', '\xE', '\x16', '\x8E', '\x3', '\x16', '\x3', '\x16', '\x3', 'u', 
		'\x2', '\x17', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', 
		'!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', 
		'\x17', '\x3', '\x2', '\x5', '\x4', '\x2', '\x43', '\\', '\x63', '|', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', 
		'\x96', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', 
		')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '-', '\x3', '\x2', '\x2', '\x2', '\x5', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x34', '\x3', '\x2', '\x2', '\x2', '\t', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\x38', '\x3', '\x2', '\x2', '\x2', '\r', ';', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '?', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x13', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'H', '\x3', '\x2', '\x2', '\x2', '\x17', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'N', '\x3', '\x2', '\x2', '\x2', '\x1B', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '!', 'q', '\x3', '\x2', '\x2', '\x2', 
		'#', 'y', '\x3', '\x2', '\x2', '\x2', '%', '}', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\x82', '\x3', '\x2', '\x2', '\x2', ')', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '+', '\x8C', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 'p', '\x2', 
		'\x2', '.', '/', '\a', 'w', '\x2', '\x2', '/', '\x30', '\a', 'n', '\x2', 
		'\x2', '\x30', '\x31', '\a', 'n', '\x2', '\x2', '\x31', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '*', '\x2', '\x2', '\x33', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '.', '\x2', '\x2', 
		'\x35', '\b', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '+', '\x2', 
		'\x2', '\x37', '\n', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'q', '\x2', '\x2', '\x39', ':', '\a', 't', '\x2', '\x2', ':', '\f', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\a', '\x63', '\x2', '\x2', '<', '=', '\a', 
		'p', '\x2', '\x2', '=', '>', '\a', '\x66', '\x2', '\x2', '>', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', 'g', '\x2', '\x2', '@', '\x41', '\a', 
		's', '\x2', '\x2', '\x41', '\x10', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', 'p', '\x2', '\x2', '\x43', '\x44', '\a', 'g', '\x2', '\x2', 
		'\x44', '\x12', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', 'i', 
		'\x2', '\x2', '\x46', 'G', '\a', 'v', '\x2', '\x2', 'G', '\x14', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', 'i', '\x2', '\x2', 'I', 'J', '\a', 
		'g', '\x2', '\x2', 'J', '\x16', '\x3', '\x2', '\x2', '\x2', 'K', 'L', 
		'\a', 'n', '\x2', '\x2', 'L', 'M', '\a', 'v', '\x2', '\x2', 'M', '\x18', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', 'n', '\x2', '\x2', 'O', 'P', 
		'\a', 'g', '\x2', '\x2', 'P', '\x1A', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', 'g', '\x2', '\x2', 'R', 'S', '\a', 'p', '\x2', '\x2', 'S', 
		'T', '\a', '\x66', '\x2', '\x2', 'T', 'U', '\a', 'u', '\x2', '\x2', 'U', 
		'V', '\a', 'y', '\x2', '\x2', 'V', 'W', '\a', 'k', '\x2', '\x2', 'W', 
		'X', '\a', 'v', '\x2', '\x2', 'X', 'Y', '\a', 'j', '\x2', '\x2', 'Y', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', 'u', '\x2', '\x2', 
		'[', '\\', '\a', 'v', '\x2', '\x2', '\\', ']', '\a', '\x63', '\x2', '\x2', 
		']', '^', '\a', 't', '\x2', '\x2', '^', '_', '\a', 'v', '\x2', '\x2', 
		'_', '`', '\a', 'u', '\x2', '\x2', '`', '\x61', '\a', 'y', '\x2', '\x2', 
		'\x61', '\x62', '\a', 'k', '\x2', '\x2', '\x62', '\x63', '\a', 'v', '\x2', 
		'\x2', '\x63', '\x64', '\a', 'j', '\x2', '\x2', '\x64', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\a', 'u', '\x2', '\x2', '\x66', 
		'g', '\a', 'w', '\x2', '\x2', 'g', 'h', '\a', '\x64', '\x2', '\x2', 'h', 
		'i', '\a', 'u', '\x2', '\x2', 'i', 'j', '\a', 'v', '\x2', '\x2', 'j', 
		'k', '\a', 't', '\x2', '\x2', 'k', 'l', '\a', 'k', '\x2', '\x2', 'l', 
		'm', '\a', 'p', '\x2', '\x2', 'm', 'n', '\a', 'i', '\x2', '\x2', 'n', 
		'o', '\a', 'q', '\x2', '\x2', 'o', 'p', '\a', 'h', '\x2', '\x2', 'p', 
		' ', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\a', ')', '\x2', '\x2', 'r', 
		't', '\v', '\x2', '\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\a', ')', '\x2', '\x2', 'x', '\"', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\a', ')', '\x2', '\x2', 'z', '{', '\a', ')', '\x2', '\x2', 
		'{', '$', '\x3', '\x2', '\x2', '\x2', '|', '~', '\t', '\x2', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '&', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x83', '\t', '\x3', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\a', '\xF', '\x2', '\x2', 
		'\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\a', '\f', '\x2', '\x2', '\x8A', '*', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8D', '\t', '\x4', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\b', '\x16', '\x2', 
		'\x2', '\x91', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 'u', '\x7F', 
		'\x84', '\x87', '\x8E', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
