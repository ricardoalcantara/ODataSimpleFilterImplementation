//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Filter.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FilterParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, OR=4, AND=5, EQ=6, NE=7, GT=8, GE=9, LT=10, LE=11, 
		ENDSWITH=12, STARTSWITH=13, SUBSTRINGOF=14, STRING=15, ID=16, INT=17, 
		NEWLINE=18, WS=19;
	public const int
		RULE_filter = 0, RULE_expr = 1;
	public static readonly string[] ruleNames = {
		"filter", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'or'", "'and'", "'eq'", "'ne'", "'gt'", "'ge'", 
		"'lt'", "'le'", "'endswith'", "'startswith'", "'substringof'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "OR", "AND", "EQ", "NE", "GT", "GE", "LT", "LE", 
		"ENDSWITH", "STARTSWITH", "SUBSTRINGOF", "STRING", "ID", "INT", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Filter.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FilterParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FilterParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FilterParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FilterContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 0, RULE_filter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4; expr(0);
				}
				}
				State = 7;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ENDSWITH) | (1L << STARTSWITH) | (1L << SUBSTRINGOF) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncOpContext : ExprContext {
		public IToken func;
		public ITerminalNode ID() { return GetToken(FilterParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(FilterParser.STRING, 0); }
		public FuncOpContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntOpContext : ExprContext {
		public IToken op;
		public ITerminalNode ID() { return GetToken(FilterParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(FilterParser.INT, 0); }
		public IntOpContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringOpContext : ExprContext {
		public IToken op;
		public ITerminalNode ID() { return GetToken(FilterParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(FilterParser.STRING, 0); }
		public StringOpContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterVisitor<TResult> typedVisitor = visitor as IFilterVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new StringOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10; Match(ID);
				State = 11;
				((StringOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NE) ) {
					((StringOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 12; Match(STRING);
				}
				break;
			case 2:
				{
				_localctx = new IntOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13; Match(ID);
				State = 14;
				((IntOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
					((IntOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 15; Match(INT);
				}
				break;
			case 3:
				{
				_localctx = new FuncOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16;
				((FuncOpContext)_localctx).func = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENDSWITH) | (1L << STARTSWITH) | (1L << SUBSTRINGOF))) != 0)) ) {
					((FuncOpContext)_localctx).func = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 17; Match(T__0);
				State = 18; Match(ID);
				State = 19; Match(T__1);
				State = 20; Match(STRING);
				State = 21; Match(T__2);
				}
				break;
			case 4:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; Match(T__0);
				State = 23; expr(0);
				State = 24; Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 34;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 28;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 29; ((AndContext)_localctx).op = Match(AND);
						State = 30; expr(7);
						}
						break;
					case 2:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 31;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 32; ((OrContext)_localctx).op = Match(OR);
						State = 33; expr(6);
						}
						break;
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '*', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x6', '\x2', '\b', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\t', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '%', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '(', '\v', '\x3', '\x3', '\x3', '\x2', '\x3', '\x4', '\x4', '\x2', 
		'\x4', '\x2', '\x5', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\b', '\r', 
		'\x3', '\x2', '\xE', '\x10', '\x2', '-', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x6', '\b', '\x5', 
		'\x4', '\x3', '\x2', '\a', '\x6', '\x3', '\x2', '\x2', '\x2', '\b', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\a', '\x3', '\x2', '\x2', '\x2', '\t', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\n', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\f', '\b', '\x3', '\x1', '\x2', '\f', '\r', '\a', '\x12', '\x2', 
		'\x2', '\r', '\xE', '\t', '\x2', '\x2', '\x2', '\xE', '\x1D', '\a', '\x11', 
		'\x2', '\x2', '\xF', '\x10', '\a', '\x12', '\x2', '\x2', '\x10', '\x11', 
		'\t', '\x3', '\x2', '\x2', '\x11', '\x1D', '\a', '\x13', '\x2', '\x2', 
		'\x12', '\x13', '\t', '\x4', '\x2', '\x2', '\x13', '\x14', '\a', '\x3', 
		'\x2', '\x2', '\x14', '\x15', '\a', '\x12', '\x2', '\x2', '\x15', '\x16', 
		'\a', '\x4', '\x2', '\x2', '\x16', '\x17', '\a', '\x11', '\x2', '\x2', 
		'\x17', '\x1D', '\a', '\x5', '\x2', '\x2', '\x18', '\x19', '\a', '\x3', 
		'\x2', '\x2', '\x19', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', 
		'\a', '\x5', '\x2', '\x2', '\x1B', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\v', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x12', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '&', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\f', '\b', '\x2', '\x2', '\x1F', ' ', '\a', '\a', '\x2', '\x2', 
		' ', '%', '\x5', '\x4', '\x3', '\t', '!', '\"', '\f', '\a', '\x2', '\x2', 
		'\"', '#', '\a', '\x6', '\x2', '\x2', '#', '%', '\x5', '\x4', '\x3', '\b', 
		'$', '\x1E', '\x3', '\x2', '\x2', '\x2', '$', '!', '\x3', '\x2', '\x2', 
		'\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '\x6', '\t', '\x1C', 
		'$', '&',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
